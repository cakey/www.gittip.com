from collections import defaultdict

from aspen import Response
from aspen.utils import to_age
from gittip import db, ORDINALS
from gittip.elsewhere import github
from gittip.models.community import Community, name_pattern, slugize
from gittip.models.participant import Participant
from gittip.query_cache import QueryCache

LUXURY = 4

query_cache = QueryCache(db, threshold=20)


def _wrap(raw):
    """This is a step on the way to ORM-ifying this simplate.
    """
    for rec in raw:
        participant = Participant.query.get(rec['username'])
        if 'amount' in rec:
            participant.amount = rec['amount']
        yield participant

def _to_age(participant):
    # XXX I can't believe I'm doing this. Evolve aspen.utils.to_age!
    age = to_age(participant.claimed_time, fmt_past="%(age)s")
    age = age.replace('just a moment', 'just now')
    age = age.replace('an ', '1 ').replace('a ', '1 ')
    if age.endswith(' seconds'):
        age = '1 minute'
    words = ('zero', 'one', 'two','three', 'four', 'five', 'six', 'seven',
                                                               'eight', 'nine')
    for i, word in enumerate(words):
        age = age.replace(word, str(i))
    return age.replace(' ', ' <span class="unit">') + "</span>"

THRESHOLD = website.NMEMBERS_THRESHOLD

def get_first_ten():
    """Return a dictionary mapping community slugs to ordinal numbers.
    """
    holy_heck = db.fetchall("SELECT * FROM communities ORDER BY mtime ASC")
    _first_ten = []
    communities = defaultdict(lambda: (defaultdict(set), defaultdict(int)))
    for detail in holy_heck:
        _slug = detail['slug']
        _members, _nmembers = communities[_slug]
        if detail['is_member']:
            if detail['participant'] not in _members[_slug]:
                _members[_slug].add(detail['participant'])
                _nmembers[_slug] += 1
            else:
                _members[_slug].remove(detail['participant'])
                _nmembers[_slug] -= 1

        if _nmembers[_slug] == THRESHOLD:
            _first_ten.append(_slug)
            if len(_first_ten) == 10:
                break

    first_ten = {}
    for i, slug in enumerate(_first_ten, start=1):
        first_ten[slug] = ORDINALS[i]

    return first_ten
[---]

_slug = path['slug']
if name_pattern.match(_slug) is None:
    raise Response(404)
slug = slugize(_slug)
if slug != _slug:
    request.redirect('../' + slug + '/')

try:
    limit = min(int(qs.get('limit', 12)), 100)
    offset = int(qs.get('offset', 0))
except ValueError:
    raise Response(400)

community = Community.query.filter_by(slug=slug).first()
if community is None:
    class StubCommunity:
        name = _slug
        nmembers = 0
        check_membership = lambda a, b: False

    community = StubCommunity()

# Set the page title based on the communities name.
title = community.name + ' Community'

if community.nmembers >= website.NMEMBERS_THRESHOLD:

    # Compute a dict of the first ten communities.
    # ============================================
    # We want to reward the first ten communities on Gittip with a message
    # saying they were the first.

    first_ten = get_first_ten()


    # Run queries for listings.
    # =========================

    new_participants = _wrap(query_cache.fetchall("""
    -- new participants on community page

        SELECT username, claimed_time FROM (
            SELECT DISTINCT ON (p.username)
                   p.username
                 , claimed_time
              FROM participants p
              JOIN elsewhere e
                ON p.username = e.participant
              JOIN current_communities cc
                ON p.username = cc.participant
             WHERE claimed_time IS NOT null
               AND is_suspicious IS NOT true
               AND cc.slug = %s AND cc.is_member
               ) AS foo
      ORDER BY claimed_time DESC
         LIMIT %s
        OFFSET %s

    """, (community.slug, limit, offset)))

    givers = _wrap(query_cache.fetchall("""
    -- top givers on community page

        SELECT tipper AS username, anonymous, sum(amount) AS amount
          FROM (    SELECT DISTINCT ON (tipper, tippee)
                           amount
                         , tipper
                      FROM tips
                      JOIN participants p ON p.username = tipper
                      JOIN participants p2 ON p2.username = tippee
                      JOIN elsewhere ON elsewhere.participant = tippee
                      JOIN current_communities cc ON cc.participant = tipper
                     WHERE p.last_bill_result = ''
                       AND p.is_suspicious IS NOT true
                       AND p2.claimed_time IS NOT NULL
                       AND elsewhere.is_locked = false
                       AND cc.slug = %s and cc.is_member
                  ORDER BY tipper, tippee, tips.mtime DESC
                  ) AS foo
          JOIN participants p ON p.username = tipper
         WHERE is_suspicious IS NOT true
      GROUP BY tipper, anonymous
      ORDER BY amount DESC
      LIMIT %s
      OFFSET %s

    """, (community.slug, limit, offset)))

    # XXX I'm nearly positive that one or both of givers and receivers can contain
    # orphan accounts. See https://github.com/gittip/www.gittip.com/issues/650

    receivers = _wrap(query_cache.fetchall("""
    -- top receivers on community page

        SELECT tippee AS username, claimed_time, sum(amount) AS amount
          FROM (    SELECT DISTINCT ON (tipper, tippee)
                           amount
                         , tippee
                      FROM tips
                      JOIN participants p ON p.username = tipper
                      JOIN elsewhere ON elsewhere.participant = tippee
                      JOIN current_communities cc ON cc.participant = tippee
                     WHERE last_bill_result = ''
                       AND elsewhere.is_locked = false
                       AND is_suspicious IS NOT true
                       AND claimed_time IS NOT null
                       AND cc.slug = %s and cc.is_member
                  ORDER BY tipper, tippee, tips.mtime DESC
                  ) AS foo
          JOIN participants p ON p.username = tippee
         WHERE is_suspicious IS NOT true
      GROUP BY tippee, claimed_time
      ORDER BY amount DESC
      LIMIT %s
      OFFSET %s

    """, (community.slug, limit, offset)))
[---]
{% extends templates/base.html %}
{% block heading %}
    <h2 class="top"><span>Community</span></h2>
    <p>Browse <a href="/for/">All Communities</a></p>
{% end %}
{% block box %}
<div class="on-community">
    <h2 class="pad-sign">{{ community.name }}</h2>
    <div class="number">
        <span class="total-giving">{{ community.nmembers }}</span>
    </div>
    <div class="unit pad-sign">member{{ '' if community.nmembers == 1 else 's' }}</div>
</div>
<div class="nav level-1">
    {% if user.ANON %}
    <div class="help with-padding">
        {% include templates/sign-in-using.html %}
        to join the {{ community.name }} community on Gittip.
    </div>
    {% else %}
    {% set is_member = community.check_membership(user) %}
    <button class="join-leave"
            data-name="{{ community.name }}"
            data-is-member="{{ 'true' if is_member else 'false' }}">
        <span>{{ "Leave" if is_member else "Join" }}</span>
    </button>
    {% end %}
</div>

{% end %}
{% block page %}
<script>
$(document).ready(function() {

    $('BUTTON.join-leave').click(function()
    {
        var button = $(this);
        var name = button.attr('data-name');
        var is_member = button.attr('data-is-member') === 'true';
        Gittip.communities.update(name, !is_member, function()
        {
            window.location.reload();
        });
    });

});
</script>

{% if community.nmembers < website.NMEMBERS_THRESHOLD %}
<div class="col0">

    {% if community.nmembers == 0 %}
    <h2>Bring the {{ community.name }} community to Gittip!</h2>
    {% else %}
    {% set nneeded = website.NMEMBERS_THRESHOLD - community.nmembers %}
    <h2>{{ nneeded }} more
        member{{ '' if nneeded == 1 else 's' }} needed!</h2>
    {% end %}

    <p>Communities on Gittip are self-organized. Once this community reaches
    {{ website.NMEMBERS_THRESHOLD }}
    member{{ '' if website.NMEMBERS_THRESHOLD == '1' else 's' }},
    we'll start showing stats and info here. Check out <a href="/for/">other
        communities</a> for examples.</p>

    <h2>What is Gittip?</h2>

    <p>Gittip is a weekly gift exchange. It's a way to support and thank people
    and projects whose work you admire. <a href="/about/">Learn more
        ...</a></p>

</div>
{% else %}

{% if community.slug in first_ten %}
<div style="text-align: center;">
    <h1 class="congrats">Congratulations!</h1>
    <p>You're the {{ first_ten[community.slug] }} community on Gittip! :D</p>
</div>
{% end %}


<div id="leaderboard">

    <div class="new-participants">
        <h2>New Members</h2>
        <ul class="group">
            {% for i, participant in enumerate(new_participants, start=1) %}
            <li{% if i > LUXURY %} class="luxury"{% end %}>
                <a href="/{{ participant.username }}/" class="mini-user">
                    <span class="inner">
                        <span class="avatar"
                            style="background-image:
                                url('{{ participant.get_img_src() }}')">
                            <span class="rank">{{ i }}</span>
                        </span>
                        <span class="age">{{ _to_age(participant) }}</span>
                        <span class="name">{{ participant.username }}</span>
                    </span>
                </a>
            </li>
            {% end %}
        </ul>
    </div>
    <div class="top-givers">
        <h2>Top Givers</h2>
        <ul class="group">
            {% for i, giver in enumerate(givers, start=1) %}
            <li{% if i > LUXURY %} class="luxury"{% end %}>
                {% if giver.anonymous and not user.is_admin %}
                <span class="mini-user">
                    <span class="inner">
                        <span class="avatar">
                            <span class="rank">{{ i }}</span>
                        </span>
                        <span class="money">${{ giver.amount }}</span>
                        <span class="name">???</span>
                    </span>
                </span>
                {% else %}
                <a href="/{{ giver.username }}/"
                   class="mini-user{{ ' anonymous' if giver.anonymous else '' }}">
                    <span class="inner">
                        <span class="avatar"
                            style="background-image: url('{{ giver.get_img_src() }}')">
                            <span class="rank">{{ i }}</span>
                        </span>
                        <span class="money">${{ giver.amount }}</span>
                        <span class="name">{{ giver.username }}</span>
                    </span>
                </a>
                {% end %}
            </li>
            {% end %}
        </ul>
    </div>
    <div class="top-receivers">
        <h2>Top Receivers</h2>
        <ul class="group">
            {% for i, receiver in enumerate(receivers, start=1) %}
            <li{% if i > LUXURY %} class="luxury"{% end %}>
                <a href="/{{ receiver.username }}/" class="mini-user">
                    <span class="inner">
                        <span class="avatar"
                            style="background-image: url('{{ receiver.get_img_src() }}')">
                            <span class="rank">{{ i }}</span>
                        </span>
                        <span class="money">${{ receiver.amount }}</span>
                        <span class="name">{{ receiver.username }}</span>
                    </span>
                </a>
            </li>
            {% end %}
        </ul>
    </div>

</div>
{% end %}

{% end %}
